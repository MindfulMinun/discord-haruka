// Generated by CoffeeScript 2.3.1
(function() {
  //! ========================================
  //! Creating Haruka
  /*
   * The message handlers will be passed a snapshot of the Haruka instance.
   * The Haruka instance will have the following structure:

      Haruka {
          dev: Boolean
          functions: [{
              name: String
              regex: RegExp
              handler: Function
              help: String
          }, ...]
          prefix: Enum('-h', '#h')
          db: {
              serverSettings: Datastore
          }
          defaultServerSettings: Object
          addFunction: Function
          try: Function
          config: JSON
      }
   */
  var Haruka, HarukaFns, file, fnObj, fs, i, len;

  Haruka = {};

  Haruka.dev = false;

  Haruka.version = "v1.1.0";

  Haruka.functions = [];

  Haruka.prefix = Haruka.dev ? '#h' : '-h';

  //! ========================================
  //! Modules
  fs = require('fs');

  //! ========================================
  //! Helper functions
  Array.prototype.choose = function() {
    return this[Math.floor(Math.random() * this.length)];
  };

  Haruka.addFunction = function(fnObj) {
    return Haruka.functions.push(fnObj);
  };

  //! ========================================
  //! Take Haruka's functions and add them to the queue
  HarukaFns = fs.readdirSync('./dist/functions').filter(function(file) {
    return file.endsWith('.js') && !file.startsWith("_");
  });

  for (i = 0, len = HarukaFns.length; i < len; i++) {
    file = HarukaFns[i];
    fnObj = require(`../dist/functions/${file}`);
    Haruka.addFunction(fnObj);
  }

  Haruka.try = function(msg) {
    var fn, j, len1, ref, regexMatch, txt;
    //! Tokenize input
    txt = msg.content.tokenize();
    txt[1] = txt[1] ? txt[1] : "help";
    //! Check if the message starts with the prefix,
    //! and it's not from another bot.
    if ((txt[0] !== Haruka.prefix) || msg.author.bot) {
      return;
    }
    //! Show a warning if Haruka's in dev mode
    if (Haruka.dev) {
      msg.reply("I'm in **development** mode, stuff may break. Use `#h` instead of `-h`.");
    }
    ref = Haruka.functions;
    //! Run through all the commands and see if one matches.
    for (j = 0, len1 = ref.length; j < len1; j++) {
      fn = ref[j];
      regexMatch = fn.regex.exec(txt[1]);
      if (regexMatch) {
        return fn.handler(msg, regexMatch, Haruka);
      }
    }
    //! Catchall
    return msg.reply(["Hmm, I'm not sure what you mean by that.", "Sorry, I don't know what you meant by that.", "I’m not sure I understand.", "I’m not sure what you mean."].choose() + " Try `-h help` for a list of commands.");
  };

  module.exports = Haruka;

}).call(this);
