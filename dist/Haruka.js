// Generated by CoffeeScript 2.3.1
(function() {
  //! ========================================
  //! Creating Haruka
  var Datastore, Haruka, HarukaFns, file, fnObj, fs, i, len;

  Haruka = {};

  Haruka.dev = true;

  Haruka.functions = [];

  Haruka.prefix = Haruka.dev ? '#h' : '-h';

  //! ========================================
  //! Modules
  fs = require('fs');

  Datastore = require('nedb');

  //! ========================================
  //! Datastores
  Haruka.db = {
    serverSettings: new Datastore({
      filename: 'data/serverSettings.db',
      autoload: true
    })
  };

  Haruka.defaultServerSettings = {
    modRole: "mod",
    adminRole: "admin",
    welcomeChannel: "welcome",
    shouldWelcomeNewMembers: true
  };

  //! Compact database every hour
  // Haruka.db.persistence.setAutocompactionInterval 3.6e+6

  //! ========================================
  //! Helper functions
  // welcomeMessage: [
  //     "Welcome to the server, {member}!"
  //     # "サーバへようこそ, {member}さま！"
  //     "Behold! {member} has arrived!"
  //     "A wild {member} appeared!"
  //     "The man, the myth, the legend, {member} has arrived!"
  //     "{member} joined the party."
  // ]
  Array.prototype.choose = function() {
    return this[Math.floor(Math.random() * this.length)];
  };

  Haruka.addFunction = function(fnObj) {
    return Haruka.functions.push(fnObj);
  };

  //! ========================================
  //! Take Haruka's functions and add them to the queue
  HarukaFns = fs.readdirSync('./dist/functions').filter(function(file) {
    return file.endsWith('.js');
  });

  for (i = 0, len = HarukaFns.length; i < len; i++) {
    file = HarukaFns[i];
    fnObj = require(`../dist/functions/${file}`);
    Haruka.addFunction(fnObj);
  }

  Haruka.try = function(msg) {
    var args, fn, hasRun, j, len1, ref, regexMatch, txt;
    txt = msg.content;
    hasRun = false;
    //! Check if the message starts with the prefix,
    //! and it's not from another bot.
    if (!txt.startsWith(Haruka.prefix) || msg.author.bot) {
      return;
    }
    //! Arguments = "-h    my command" -> "my command"
    args = txt.slice(Haruka.prefix.length).replace(/^\s+/g, '');
    //! Show a warning if Haruka's in dev mode
    if (Haruka.dev) {
      msg.reply("I'm in **development** mode, stuff may break. Use `#h` instead of `-h`.");
    }
    ref = Haruka.functions;
    //! Run through all the commands and see if one matches.
    for (j = 0, len1 = ref.length; j < len1; j++) {
      fn = ref[j];
      if (hasRun === false) {
        regexMatch = fn.regex.exec(args);
        if (regexMatch) {
          hasRun = true;
          fn.handler(msg, regexMatch, Haruka);
        }
      }
    }
    //! Catchall
    if (!hasRun) {
      return msg.reply(["Hmm, I'm not sure what you mean by that.", "Sorry, I don't know what you meant by that.", "I’m not sure I understand.", "I’m not sure what you mean."].choose() + " Try `-h help` for a list of commands.");
    }
  };

  module.exports = Haruka;

}).call(this);
