// Generated by CoffeeScript 2.3.1
//! ========================================
//! Pokémon
var Discord, capitalize, dasherize, handler, r, request, toDexNumber, undasherize;

Discord = require('discord.js');

request = require('request');

r = function(options) {
  return new Promise(function(resolve, reject) {
    return request(options, function(err, response, body) {
      var ref, shouldResolve;
      shouldResolve = [!err, (200 <= (ref = response != null ? response.statusCode : void 0) && ref < 400), !JSON.parse(body).error].every(function(v) {
        return v;
      }) === true;
      if (shouldResolve) {
        return resolve(JSON.parse(body));
      } else {
        return reject(JSON.parse(body));
      }
    });
  });
};

//! String utils
capitalize = function(txt) {
  return txt.charAt(0).toUpperCase() + txt.substr(1);
};

dasherize = function(str) {
  return str.toLowerCase().replace(/[^A-Za-z0-9\s]/g, '').replace(/\s+/g, '-');
};

undasherize = function(str) {
  return str.split('-').map(function(s) {
    return capitalize(s);
  }).join(' ');
};

toDexNumber = function(n) {
  return '#' + n.toString().padStart(3, '0');
};

//! ========================================
//! Message handler
handler = function(msg, match, Haruka) {
  var P, pkmn, pokeRequest, species;
  pokeRequest = dasherize(match.input.tokenize()[1]);
  if (!pokeRequest) {
    return msg.reply(["Use `-h pkmn` followed by the Pokémon you want me to look up.", "I can look for Pokémon in my Pokédex if you use `-h pkmn` followed by a Pokémon's name or its National Dex number.", "You’re missing an argument. Try `-h help pkmn` if you forgot this command’s syntax."].choose());
  }
  [P, species, pkmn] = [{}, null, null];
  //! Fetch pkmn
  return r(`https://pokeapi.co/api/v2/pokemon-species/${pokeRequest}/`).then(function(s) {
    var PPromise;
    species = s;
    PPromise = r(`https://pokeapi.co/api/v2/pokemon/${species.id}/`);
    P.name = species.names.filter(function(n) {
      return n.language.name === "en";
    }).choose().name;
    P.dexNumber = toDexNumber(species.id);
    P.description = species.flavor_text_entries.filter(function(f) {
      return f.language.name === "en";
    }).choose().flavor_text.replace(/\s+/g, ' ');
    P.category = species.genera.filter(function(genus) {
      return genus.language.name === "en";
    }).choose().genus;
    return PPromise;
  }).then(function(p) {
    pkmn = p;
    P.abilities = pkmn.abilities.map(function(a) {
      return undasherize(a.ability.name);
    }).join(', ');
    P.sprite = pkmn.sprites.front_default;
    P.types = pkmn.types.map(function(t) {
      return capitalize(t.type.name);
    });
    P.movepool = pkmn.moves.length + " moves";
    P.stats = pkmn.stats.map(function(s) {
      switch (s.stat.name) {
        case "hp":
          return {
            pos: 0,
            txt: `HP: ${s.base_stat}`
          };
        case "attack":
          return {
            pos: 1,
            txt: `Atk: ${s.base_stat}`
          };
        case "defense":
          return {
            pos: 2,
            txt: `Def: ${s.base_stat}`
          };
        case "special-attack":
          return {
            pos: 3,
            txt: `SpA: ${s.base_stat}`
          };
        case "special-defense":
          return {
            pos: 4,
            txt: `SpD: ${s.base_stat}`
          };
        case "speed":
          return {
            pos: 5,
            txt: `Spd: ${s.base_stat}`
          };
      }
    });
    return P.stats = P.stats.sort(function(a, b) {
      return a.pos - b.pos;
    }).map(function(x) {
      return x.txt;
    }).join('; ');
  }).then(function() {
    var embed;
    //! Create the embed object
    embed = new Discord.RichEmbed().setColor('#448aff').setURL(`https://www.smogon.com/dex/sm/pokemon/${P.name}/`).setThumbnail(P.sprite).setTitle(`${capitalize(P.name)} — ${P.dexNumber}`).setDescription(P.description).addField("National Dex \#", P.dexNumber, true).addField("Typing", P.types.join("/"), true).addField("Category", P.category, true).addField("Movepool", P.movepool, true).addField("Abilities", P.abilities).addField("Base stats", P.stats);
    return msg.channel.send(embed);
  }).catch(function(err) {
    console.log(err);
    if (err.detail === "Not found.") {
      return msg.reply(["That Pokémon doesn’t seem to exist in my Pokédex, did you type its name correctly?", "I couldn’t find that Pokémon in my Pokédex. Try asking a Professor instead?"].choose());
    } else {
      return msg.reply(["An error occurred while fetching the Pokémon. Sorry about that.", "An exception was thrown while fetching the Pokémon."].choose());
    }
  });
};

module.exports = {
  name: "Pokémon",
  regex: /^(pkmn|pokemon|pokémon|poke|poké)(\s+|$)/i,
  handler: handler,
  //! coffeelint: disable=max_line_length
  help: {
    short: "-h pkmn <...>  :: Get information regarding a Pokémon (See -h help pkmn)",
    long: "```asciidoc\n=== Help for Pokémon ===\n*Aliases*: pkmn, pokemon, pokémon, poke, poké\n-h pkmn <nameOrId> :: Given a Pokémon’s name or National Pokédex Number,\n                      this command returns information on a specific Pokémon.\n```" //! coffeelint: enable=max_line_length
  }
};
