// Generated by CoffeeScript 2.3.1
//! ========================================
//! WolframAlpha
var Embed, handler, path, r;

r = require(`${__dirname}/../helpers/fetch`);

Embed = (require('discord.js')).RichEmbed;

path = ["http://api.wolframalpha.com/v1/query?", `appid=${process.env.WA_APPID}`, "&output=json", "&input="].join('');

handler = function(msg, match, Haruka) {
  var args;
  args = match.input.tokenize()[1];
  if (!args) {
    return msg.reply(["Please enter a search term.", "What would you like to know about?"].choose());
  }
  return msg.reply(`Searching for “${args}”...`, {
    disableEveryone: true
  }).then(function(reply) {
    return r(path + encodeURIComponent(args)).then(function(json) {
      var embed, i, input, len, pod, ref, result, textPods;
      result = json.queryresult;
      if ((!result) || (result.success === false)) {
        return msg.reply(["An error occurred while processing the input."].choose());
      }
      embed = new Embed();
      embed.setFooter("Powered by WolframAlpha");
      embed.setURL(`https://www.wolframalpha.com/input/?i=${encodeURIComponent(args)}`);
      embed.setTitle(`Results for “${args}”`);
      if (/^Input/.test(result.pods[0].title)) {
        input = result.pods.shift();
        embed.setTitle(input.title);
        textPods = input.subpods.filter(function(x) {
          return x.plaintext.trim().length;
        });
        if (textPods.length) {
          embed.setDescription(textPods.map(function(x) {
            return x.plaintext;
          }).join('\n'));
        }
      }
      ref = result.pods.slice(0, 11);
      for (i = 0, len = ref.length; i < len; i++) {
        pod = ref[i];
        textPods = pod.subpods.map(function(x) {
          // if x.img and x.img.alt
          // alt = x.img.alt
          //       .replace(/[*_]/g, '\\$&') or "See image"
          // return "[#{alt}](#{x.img.src})"
          if (x.plaintext) {
            return x.plaintext.replace(/[\\*_]/g, '\\$&');
          }
        }).filter(function(x) {
          return x != null;
        });
        if (textPods.length) {
          embed.addField(pod.title, textPods.join('\n\n'));
        }
      }
      reply.delete();
      return msg.reply(`Results for “${args}”:`, embed);
    });
  }).catch(function(err) {
    console.log(err);
    return msg.reply(["An error occurred. Whoops.", "Something happened while processing the input."].choose());
  });
};

module.exports = {
  name: "WolframAlpha",
  regex: /^(wa|wolfram|wolframalpha)(\s+|$)/i,
  handler: handler,
  help: {
    short: "-h wa          :: Ask anything with WolframAlpha.",
    long: "```asciidoc\n=== Help for WolframAlpha ===\n*Aliases*: list, of, aliases\n-h fn       :: Function without arguments.\n-h fn <arg> :: Function with arguments.\n```"
  }
};
