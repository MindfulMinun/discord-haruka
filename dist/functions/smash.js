// Generated by CoffeeScript 2.3.1
//! ========================================
//! Smash
var Discord, fNameMap, fighterPath, frameDataURL, fuzzysort, handler, r, request, root, seriesMap;

Discord = require('discord.js');

request = require('request');

fuzzysort = require('fuzzysort');

r = function(options) {
  return new Promise(function(resolve, reject) {
    return request(options, function(err, response, body) {
      var ref, shouldResolve;
      shouldResolve = [!err, (200 <= (ref = response != null ? response.statusCode : void 0) && ref < 400)].every(function(v) {
        return v;
      }) === true;
      if (shouldResolve) {
        return resolve(JSON.parse(body));
      } else {
        return reject(response);
      }
    });
  });
};

// Map series slugs to series names
seriesMap = {
  "mario": "Super Mario",
  "donkeykong": "Donkey Kong",
  "zelda": "Zelda",
  "metroid": "Metroid",
  "yoshi": "Yoshi",
  "kirby": "Kirby",
  "starfox": "Star Fox",
  "pokemon": "Pokémon",
  "mother": "EarthBound",
  "f-zero": "F-Zero",
  "iceclimber": "Ice Climber",
  "fireemblem": "Fire Emblem",
  "gamewatch": "Game & Watch",
  "palutena": "Kid Icarus",
  "wario": "WarioWare",
  "metalgear": "Metal Gear",
  "sonic": "Sonic",
  "pikmin": "Pikmin",
  "famicomrobot": "R.O.B.",
  "doubutsu": "Animal Crossing",
  "rockman": "Mega Man",
  "wii_fit": "Wii Fit",
  "punch_out": "Punch-Out!!",
  "mii": "Mii",
  "pacman": "PAC-MAN",
  "xenoblade": "Xenoblade Chronicles",
  "duckhunt": "Duck Hunt",
  "streetfighter": "Street Fighter",
  "finalfantasy": "Final Fantasy",
  "bayonetta": "Bayonetta",
  "splatoon": "Splatoon",
  "dracula": "Castlevania",
  "persona": "Persona"
};

// Map fighters to their names
fNameMap = ["Mario", "Donkey Kong", "Link", "Samus", "Dark Samus", "Yoshi", "Kirby", "Fox", "Pikachu", "Luigi", "Ness", "Captain Falcon", "Jigglypuff", "Peach", "Daisy", "Bowser", "Ice Climbers", "Sheik", "Zelda", "Dr. Mario", "Pichu", "Falco", "Marth", "Lucina", "Young Link", "Ganondorf", "Mewtwo", "Roy", "Chrom", "Mr. Game & Watch", "Meta Knight", "Pit", "Dark Pit", "Zero Suit Samus", "Wario", "Snake", "Ike", "Pokémon Trainer", "Diddy Kong", "Lucas", "Sonic", "King Dedede", "Olimar", "Lucario", "R.O.B.", "Toon Link", "Wolf", "Villager", "Mega Man", "Wii Fit Trainer", "Rosalina & Luma", "Little Mac", "Greninja", "Mii Fighter", "Palutena", "PAC-MAN", "Robin", "Shulk", "Bowser Jr.", "Duck Hunt", "Ryu", "Ken", "Cloud", "Corrin", "Bayonetta", "Inkling", "Ridley", "Simon", "Richter", "King K. Rool", "Isabelle", "Incineroar", "Piranha Plant", "Joker"];

root = 'https://www.smashbros.com/assets_v2';

frameDataURL = 'https://test-khapi.frannsoft.com/api/characters/?game=ultimate';

fighterPath = root + '/data/fighter.json';

handler = function(msg, match, Haruka) {
  var args, fdata;
  args = match.input.tokenize()[1];
  if (!args) {
    return msg.reply(["You didn’t enter a search term, so I couldn’t search for a fighter.", "You need to enter a search term to search a fighter.", "Provide a search term when using this command. :)"].choose());
  }
  fdata = r(frameDataURL).then(function(json) {
    return (json.map(function(c) {
      return {
        name: c.DisplayName,
        url: c.FullUrl
      };
    })).reduce((function(acc, v, i, arr) {
      acc[v.name] = v.url;
      return acc;
    }), {});
  });
  return r(fighterPath).then(async function(fighters) {
    var echo, embed, imgHead, imgPanoramic, lucky, name, ref, ref1, series, title, url;
    fighters = fighters.fighters;
    fighters.map(function(f, i) {
      return f._name = fNameMap[i];
    });
    // "I'm feeling lucky" style search
    lucky = (ref = fuzzysort.go(args, fighters, {
      keys: ['displayNum', '_name', 'url', 'displayNameEn', 'displayNameEnSecondary']
    })) != null ? (ref1 = ref[0]) != null ? ref1.obj : void 0 : void 0;
    if (!lucky) {
      return msg.reply(['Sorry, but I couldn’t find that fighter.', 'I couldn’t find that fighter, sorry.'].choose());
    }
    // Mapped name or default to the one in the JSON.
    // Falcon, G&W, and Pkmn Trainer include an html <br> element.
    // Get rid of it.
    name = lucky._name || lucky.displayName.en_US.replace(/\<\S[\s\S]*?\>/gi, '').replace(/\s+/g, ' ');
    url = `https://www.smashbros.com/en_US/fighter/${lucky.url}.html`;
    imgHead = `${root}/img/fighter/pict/${lucky.file}.png`;
    imgPanoramic = `${root}/img/fighter/series/${lucky.file}.png`;
    // Format the name like "21e – Lucina"
    title = (lucky.displayNumEn || lucky.displayNum) + " — " + name;
    series = (seriesMap[lucky.series] || `\`${lucky.series}\``) + " series";
    echo = (function() {
      var out, ref2;
      out = '';
      if (lucky.dash) {
        out += `Yes, ${name} is `;
        out += fNameMap[fighters.indexOf(lucky) - 1];
        out += '’s echo fighter.';
      } else if ((ref2 = fighters[fighters.indexOf(lucky) + 1]) != null ? ref2.dash : void 0) {
        out += fNameMap[fighters.indexOf(lucky) + 1];
        out += ` is ${name}’s echo fighter.`;
      } else {
        out += 'None';
      }
      return out;
    })();
    fdata = (async function() {
      url = ((await fdata))[name];
      if (url) {
        return `[Available](${url})`;
      } else {
        return "Not available (yet)";
      }
    })();
    embed = new Discord.RichEmbed().setColor(lucky.color).setAuthor(title, imgHead, url).addField('Echo', echo, true).addField('Series', series, true).addField('Frame data', (await fdata), true).setImage(imgPanoramic);
    return msg.channel.send(embed);
  });
};

module.exports = {
  name: "Smash",
  regex: /^(smash|ssbu)(\s+|$)/i,
  handler: handler,
  help: {
    short: "-h ssbu <f>    :: Returns some info regarding some SSBU Fighter.",
    long: "```asciidoc\n=== Help for Smash ===\n*Aliases*: ssbu, smash\n-h ssbu       :: Function without arguments.\n-h ssbu <arg> :: Function with arguments.\n```"
  }
};
