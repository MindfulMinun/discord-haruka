// Generated by CoffeeScript 2.3.1
(function() {
  //! ========================================
  //! Kanji
  var Discord, asyncReq, handler, request;

  Discord = require('discord.js');

  request = require('request');

  asyncReq = function(options) {
    return new Promise(function(resolve, reject) {
      return request(options, function(err, response, body) {
        var ref;
        // coffeelint: disable=max_line_length
        if (!err && ((200 <= (ref = response.statusCode) && ref < 400)) && !JSON.parse(body).error) {
          // coffeelint: enable=max_line_length
          return resolve({response, body});
        }
        return reject({err, response, body});
      });
    });
  };

  handler = function(msg, match, H) {
    var kanji, options;
    kanji = match.input.tokenize()[1];
    // console.log kanji
    options = {
      url: "https://kanjialive-api.p.mashape.com/api/public/kanji/" + encodeURI(kanji),
      method: "GET",
      headers: {
        "X-Mashape-Key": H.config["kanji-alive-api-key"],
        "Content-Type": "application/json"
      }
    };
    return asyncReq(options).then(function(payload) {
      var D, E, K, R, embed;
      D = JSON.parse(payload.body);
      K = D.kanji;
      R = D.radical;
      E = D.examples;
      E = E.map(function(v) {
        return [v.japanese, v.meaning.english].join(': ');
      }).slice(0, 12).join('\n');
      console.log(E);
      // coffeelint: disable=max_line_length
      embed = new Discord.RichEmbed().setTitle(`${K.character} — ${K.meaning.english}`).setColor('#448aff').setDescription(K.meaning.english).setURL("https://app.kanjialive.com/" + encodeURI(K.character)).addField("Onyomi", K.onyomi.katakana, true).addField("Kunyomi", K.kunyomi.hiragana, true).addField("Radical", R.character + `（${R.name.hiragana || R.name.katakana}）`, true).addField("Stroke count", K.strokes.count, true).addField("Examples", E);
      // coffeelint: enable=max_line_length
      return msg.channel.send(embed);
    }).catch(function(err) {
      var ref;
      if (((ref = JSON.parse(err != null ? err.body : void 0)) != null ? ref.error : void 0) === "No kanji found.") {
        return msg.reply(["Couldn’t find Kanji", "No results came up for that Kanji.", "漢字が見つかりません。"].choose());
      }
      return msg.reply(["An error occurred.", "Unfortunately, an error occurred.", "A nasty error occurred."].choose());
    });
  };

  module.exports = {
    name: "Kanji",
    regex: /^(kanji)(\s+|$)/i,
    handler: handler,
    help: {
      short: "-h kanji <...> :: Retrieve information about a Kanji character",
      long: "```asciidoc\n=== Help for Kanji ===\n*Aliases*: kanji\n-h kanji <kanji> :: Retrieve information about a Kanji character\n```"
    }
  };

}).call(this);
