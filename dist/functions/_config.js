// Generated by CoffeeScript 2.3.1
(function() {
  //! ========================================
  //! Config
  /*
   * I give up :(
   * Files in /functions/ starting with an underscore
   * won't be pushed to Haruka#functions
   */
  var handler;

  handler = function(msg, match, H) {
    var db, getServerSettings;
    db = H.db.serverSettings;
    console.log(match.input.tokenize());
    //! Promiseify db
    getServerSettings = function(serverId) {
      return new Promise(function(resolve, reject) {
        return db.find({
          _id: serverId
        }, function(err, doc) {
          if (err) {
            return reject(err);
          } else {
            return resolve(doc);
          }
        });
      });
    };
    if (!msg.guild) {
      return msg.reply(["You have to be in a server to use this command.", "This command can only be used if you’re in a server.", "You can’t use this command outside of servers."].choose());
    }
    return getServerSettings().then(function(doc) {
      var actualType, adminRole, args, canSetProperty, expectedType, isntArray, prop, update, val;
      isntArray = !Array.isArray(doc) || !doc.length;
      if (isntArray) {
        doc = H.defaultServerSettings;
        doc._id = msg.guild.id;
        db.insert(doc);
      }
      adminRole = msg.guild.roles.find("name", doc.adminRole);
      if (!adminRole || !msg.member.roles.has(adminRole.id)) {
        return msg.reply([`You have to have the \`${doc.adminRole}\` role to use this command.`, `You don’t have the \`${doc.adminRole}\` role, so you’re not allowed to use this command.`, `You can’t do that if you don’t have the \`${doc.adminRole}\` role.`].choose());
      }
      Object.defineProperty(doc, "_id", {
        enumerable: false
      });
      canSetProperty = function(obj, prop) {
        return obj.hasOwnProperty(prop) && obj.propertyIsEnumerable(prop);
      };
      args = match.input.tokenize()[1];
      if (args) {
        //! Getting / setting
        [prop, val] = args.tokenize();
        if (val === void 0) {
          //! Getting a value
          if (canSetProperty(doc, prop)) {
            return msg.reply(`Don’t break anything.\n\`\`\`js\n{ "${prop}": ${JSON.stringify(doc[prop])} }\n\`\`\``);
          } else {
            throw Error("Haruka: Read not allowed");
          }
        } else {
          //! Setting a value
          if (canSetProperty(doc, prop)) {
            //! This part right here is very tricky.
            //! Get the typeofs of values
            expectedType = typeof doc[prop];
            actualType = typeof JSON.parse(val);
            if (expectedType !== actualType) {
              throw Error("Haruka: Type mismatch");
            }
            update = {};
            update[prop] = JSON.parse(val);
            console.log(typeof msg.guild.id);
            console.log(update);
            db.update({
              _id: msg.guild.id
            }, update);
            msg.reply("Updated value.");
          } else {
            throw Error("Haruka: ");
          }
        }
      }
      return msg.reply(`Don’t break anything.\n\`\`\`js\n// The configuration for this server: ${msg.guild.name}\n${JSON.stringify(doc, null, 2)}\n\`\`\``);
    }).catch(function(e) {
      if (e.message === "Haruka: Read not allowed") {
        return msg.reply(["Tough luck, I can’t let you read that property.", "You can’t read that property. Are you testing me?", "You’re not allowed to read that property. You better not be trying to break anything."].choose());
      }
      if (e.message.startsWith("Haruka: ")) {
        return msg.reply(e.message.tokenize()[1]);
      }
      console.log(e);
      return msg.reply(["An unexpected error occurred. If you were setting a value, make sure it's formatted correctly in JSON. (i.e., wrap quotes around strings.)", "Some error occurred. If you were setting a value, make sure strings are wrapped in quotes."].choose());
    });
  };

  module.exports = {
    name: "Config",
    regex: /^(?:config|c)/i,
    handler: handler,
    help: "```asciidoc\n=== Help for Config ===\n*Aliases*: None.\n-h config :: Prints the current server configuration.\n-h config <key> :: Prints the configuration for that value\n-h config <key> <value> :: Sets a value. Value must be JSON-formatted.\n                           (ex, strings in \"quotes\", booleans: true / false)\n```"
  };

}).call(this);
