// Generated by CoffeeScript 2.3.1
(function() {
  //! ========================================
  //! Haruka Setup
  var Discord, Haruka, client, config, fs;

  fs = require('fs');

  Discord = require('discord.js');

  config = require('../config.json');

  Haruka = require('./Haruka');

  client = new Discord.Client;

  Haruka.config = config;

  Haruka.version = config.version;

  Haruka.dev = config.dev;

  Haruka.prefix = Haruka.dev ? '#h' : '-h';

  Haruka.client = client;

  //! ========================================
  //! Add event listeners
  client.on('ready', function() {
    var d;
    d = new Date;
    client.user.setActivity('Hentai | -h help', {
      type: 'WATCHING'
    });
    if (Haruka.dev) {
      return console.log(`Started Haruka in DEVELOPMENT mode.\nLogged in as ${client.user.tag} on ${d.toUTCString()}.`);
    } else {
      return console.log(`Logged in as ${client.user.tag} on ${d.toUTCString()}.`);
    }
  });

  client.on('message', function(msg) {
    var err, r;
    try {
      return Haruka.try(msg);
    } catch (error) {
      err = error;
      //! I hope this catches bugs
      r = new RegExp(process.cwd(), 'gi');
      msg.channel.send(`**An exception has occurred:** This is a bug, this shouldn’t happen.\nCreate a GitHub issue or contact me via Discord (MindfulMinun#3386).\nInformation regarding the exception is provided below.\n\`\`\`\n${err.stack.replace(r, '~')}\n\`\`\``);
      return console.warn("\n===== Uncaught Fatal Error: =====\n", err);
    }
  });

  //! Catch Uncaught rejections and continue normally.
  process.on('unhandledRejection', function(err) {
    return console.log("===== Uncaught Promise Rejection: =====\n", err);
  });

  //! ========================================
  //! Helpers
  Array.prototype.choose = function() {
    //! Choose a random element from this array.
    return this[Math.floor(Math.random() * this.length)];
  };

  Array.prototype.last = function() {
    //! Retrieve this array's last element.
    return this[this.length - 1];
  };

  Array.prototype.first = function() {
    //! Retrieve this array’s first element (for chained calls)
    return this[0];
  };

  String.prototype.tokenize = function() {
    //! Split this string at the first occurrence of whitespace.
    return this.replace(/\s+/, '\x01').split('\x01');
  };

  //! ========================================
  //! Finally, log Haruka in.
  client.login(Haruka.config.token);

}).call(this);
