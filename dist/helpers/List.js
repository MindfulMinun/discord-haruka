// Generated by CoffeeScript 2.5.1
(function(name, root, factory) {
  // UMD: https://git.io/fjxpW
  if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    return define([], factory);
  } else if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    return module.exports = factory();
  } else {
    return root[name] = factory();
  }
})('List', typeof self !== "undefined" && self !== null ? self : this, function() {
  var List;
  return List = class List {
    constructor(arr1) {
      this.arr = arr1;
    }

    /**
     * Performs a matrix transposition on a 2d matrix
     * @author MindfulMinun
     * @param {Array?} arr - The matrix to transpose or this if none
     * @returns {Array} The transposed matrix
     * @since Aug 30, 2019 - 3.1.0
     * @version 3.1.0
     */
    transpose(arr) {
      if (arr == null) {
        arr = this.arr;
      }
      return Object.keys(arr[0]).map(function(e) {
        return arr.map(function(r) {
          return r[e];
        });
      });
    }

    /**
     * Selects a random element in the array
     * @author MindfulMinun
     * @param {Array?} arr - The array to choose from
     * @returns {Any} Return value description
     * @since Aug 30, 2019 - 3.1.0
     * @version 3.1.0
     */
    choose(arr) {
      if (arr == null) {
        arr = this.arr;
      }
      return arr[Math.floor(Math.random() * arr.length)];
    }

    /**
     * Selects the last element of the array
     * @author MindfulMinun
     * @param {Array?} arr - The array to choose from
     * @returns {Any} The last element
     * @since Aug 30, 2019 - 3.1.0
     * @version 3.1.0
     */
    last(arr) {
      if (arr == null) {
        arr = this.arr;
      }
      return arr[arr.length - 1];
    }

    /**
     * Selects the first element of the array
     * @author MindfulMinun
     * @param {Array?} arr - The array to choose from
     * @returns {Any} The first element
     * @since Aug 30, 2019 - 3.1.0
     * @version 3.1.0
     */
    first(arr) {
      if (arr == null) {
        arr = this.arr;
      }
      return arr[0];
    }

    /**
     * Calculates the summation of all the elements
     * @author MindfulMinun
     * @param {Array?} arr - The array that's hopefully filled with numbers
     * @returns {Number} The sum of these
     * @since Aug 30, 2019 - 3.1.0
     * @version 3.1.0
     */
    sum(arr) {
      if (arr == null) {
        arr = this.arr;
      }
      return arr.reduce(function(acc, val) {
        return acc + val;
      });
    }

    /**
     * Calculates the product of all the elements
     * @author MindfulMinun
     * @param {Array?} arr - The array that's hopefully filled with numbers
     * @returns {Number} The product of these
     * @since Aug 30, 2019 - 3.1.0
     * @version 3.1.0
     */
    product(arr) {
      if (arr == null) {
        arr = this.arr;
      }
      return arr.reduce(function(acc, val) {
        return acc * val;
      });
    }

  };
});
